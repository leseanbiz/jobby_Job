{"ast":null,"code":"import _objectSpread from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js\";\nimport React, { Component } from 'react';\nimport Job from './Job';\nimport { Typography, Container, Grid, Card, GridList } from '@material-ui/core';\nimport AppBar from '../components/AppBar';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\nimport ReactMinimalPieChart from 'react-minimal-pie-chart'; // import CheckboxesGroup from '../components/Checkboxes';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedJob: {},\n      switchState: {\n        partTime: true,\n        fullTime: true,\n        contract: true\n      },\n      activeStep: 0,\n      jobsData: this.props.jobs\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.filterJobsbyType = this.filterJobsbyType.bind(this);\n  } //sort jobs by time posted\n  //add pie chart\n  //add remote switch\n  //add App bar for logo, title, found jobs\n  //move 'showing' just below stepper\n  //stack remote jobs and switches to the left of jobsList\n  //pagination\n\n\n  handleNext() {\n    this.setState(prevState => {\n      return {\n        activeStep: prevState.activeStep + 1\n      };\n    });\n    window.scrollTo(0, 0);\n  }\n\n  handleBack() {\n    this.setState(prevState => {\n      return {\n        activeStep: prevState.activeStep - 1\n      };\n    });\n    window.scrollTo(0, 0);\n  } // set jobsData state array\n\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.jobs !== this.props.jobs) {\n      this.setState({\n        jobsData: this.props.jobs\n      });\n    }\n  } //switch logic\n\n\n  filterJobsbyType(name, checked) {\n    let partTimeJobs = this.props.jobs.filter(job => job.type === 'Part Time');\n    let fullTimeJobs = this.props.jobs.filter(job => job.type === 'Full Time');\n    let contractJobs = this.props.jobs.filter(job => job.type === 'Contract');\n\n    if (checked === false) {\n      if (name === \"partTime\") {\n        partTimeJobs = [];\n      }\n\n      if (name === \"fullTime\") {\n        fullTimeJobs = [];\n      }\n\n      if (name === \"contract\") {\n        contractJobs = [];\n      }\n    }\n\n    this.setState({\n      jobsData: [...partTimeJobs, ...fullTimeJobs, ...contractJobs]\n    });\n  } // switch event handler\n\n\n  handleChange(name, event) {\n    this.setState({\n      switchState: _objectSpread({}, this.state.switchState, {\n        [name]: event.target.checked\n      })\n    });\n    this.filterJobsbyType(name, event.target.checked);\n  }\n\n  //modal open and close\n  handleModalOpen() {\n    this.setState({\n      open: true\n    });\n  }\n\n  handleModalClose() {\n    this.setState({\n      open: false\n    });\n  }\n\n  render() {\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n    const _this$state = this.state,\n          open = _this$state.open,\n          selectedJob = _this$state.selectedJob,\n          switchState = _this$state.switchState,\n          activeStep = _this$state.activeStep,\n          jobsData = _this$state.jobsData;\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs / 50);\n    const jobsOnPage = jobsData.slice(activeStep * 50, activeStep * 50 + 50);\n    const remoteJobs = jobsData.filter(job => job.location.includes(\"Remote\"));\n    return React.createElement(\"div\", {\n      className: \"jobs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(JobModal, {\n      open: open,\n      handleClose: () => this.handleModalClose(),\n      job: selectedJob,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(AppBar, {\n      numJobs: numJobs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => this.handleNext(),\n      handleBack: () => this.handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h6\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Showing \", activeStep * 50, \" - \", activeStep * 50 + 50))), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 3,\n      justify: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      handleChange: this.handleChange,\n      switchState: switchState,\n      labelsArr: typeNamesArr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Remote jobs count\"), React.createElement(ReactMinimalPieChart, {\n      data: [{\n        title: 'Remote',\n        value: remoteJobs.length,\n        color: '#E38627'\n      }, {\n        title: 'Non-remote',\n        value: jobsData.length - remoteJobs.length,\n        color: '#C13C37'\n      }],\n      lineWidth: 15,\n      rounded: true,\n      label: true,\n      labelStyle: {\n        fontSize: '10px',\n        fontFamily: 'sans-serif'\n      },\n      style: {\n        height: '200px'\n      },\n      labelPosition: 60,\n      animate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 5,\n      justify: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, jobsOnPage.map((job, i) => React.createElement(Job, {\n      key: i,\n      job: job,\n      onClick: () => {\n        this.handleModalOpen();\n        this.setState({\n          selectedJob: job\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Jobs; //OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n// export default function Jobs({jobs}) {\n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n//   function handleModalOpen() {\n//     setOpen(true);\n//   }\n//   function handleModalClose() {\n//     setOpen(false);\n//   }\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleModalClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleModalOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js"],"names":["React","Component","Job","Typography","Container","Grid","Card","GridList","AppBar","JobModal","Stepper","Switch","ReactMinimalPieChart","Jobs","constructor","props","state","open","selectedJob","switchState","partTime","fullTime","contract","activeStep","jobsData","jobs","handleChange","bind","filterJobsbyType","handleNext","setState","prevState","window","scrollTo","handleBack","componentDidUpdate","prevProps","name","checked","partTimeJobs","filter","job","type","fullTimeJobs","contractJobs","event","target","handleModalOpen","handleModalClose","render","typeNamesArr","numJobs","length","numPages","Math","ceil","jobsOnPage","slice","remoteJobs","location","includes","title","value","color","fontSize","fontFamily","height","map","i"],"mappings":"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":["import React, { Component } from 'react';\nimport Job from './Job'\nimport { Typography, Container, Grid, Card, GridList } from '@material-ui/core';\nimport AppBar from '../components/AppBar';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\nimport ReactMinimalPieChart from 'react-minimal-pie-chart';\n\n// import CheckboxesGroup from '../components/Checkboxes';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false,\n                   selectedJob: {},\n                   switchState: {\n                    partTime: true,\n                    fullTime: true,\n                    contract: true,\n                  },\n                  activeStep: 0,\n                  jobsData: this.props.jobs\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.filterJobsbyType = this.filterJobsbyType.bind(this);\n  }\n\n  //sort jobs by time posted\n\n  //add pie chart\n\n  //add remote switch\n\n  //add App bar for logo, title, found jobs\n\n  //move 'showing' just below stepper\n\n  //stack remote jobs and switches to the left of jobsList\n\n\n\n  //pagination\n  handleNext() {\n    this.setState((prevState) => {\n      return {activeStep: prevState.activeStep + 1}\n    })\n    window.scrollTo(0, 0)\n  }\n\n  handleBack() {\n    this.setState((prevState) => {\n      return {activeStep: prevState.activeStep - 1}\n    });\n    window.scrollTo(0, 0)\n  }\n\n  // set jobsData state array\n  componentDidUpdate(prevProps) {\n    if(prevProps.jobs !== this.props.jobs) {\n      this.setState({ jobsData: this.props.jobs });\n    }\n  }\n\n  //switch logic\n  filterJobsbyType (name, checked) {\n    let partTimeJobs = this.props.jobs.filter(job => job.type === 'Part Time');\n    let fullTimeJobs = this.props.jobs.filter(job => job.type === 'Full Time');\n    let contractJobs = this.props.jobs.filter(job => job.type === 'Contract');\n\n    if(checked === false) {\n      if(name === \"partTime\") { \n        partTimeJobs = [];\n      }\n      if(name === \"fullTime\" ) {\n        fullTimeJobs = [];\n      }\n      if(name === \"contract\") {\n        contractJobs = [];\n      }\n    }\n    this.setState({ jobsData: [...partTimeJobs, ...fullTimeJobs, ...contractJobs] });\n  }\n\n  // switch event handler\n  handleChange(name, event) {\n    this.setState({ \n      switchState: { ...this.state.switchState, [name]: event.target.checked }\n    });\n    this.filterJobsbyType(name, event.target.checked);\n  };\n\n  //modal open and close\n  handleModalOpen() {\n    this.setState({\n      open: true\n    })\n  }\n\n  handleModalClose() {\n    this.setState({\n      open: false\n    })\n  }\n\n  render() {\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n    const {open, selectedJob, switchState, activeStep, jobsData } = this.state;\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs/50);\n    const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n    const remoteJobs = jobsData.filter(job => job.location.includes(\"Remote\"));\n    \n    return (\n      <div className='jobs'>\n        <JobModal \n          open={open} \n          handleClose={() => this.handleModalClose()} \n          job={selectedJob} \n        />\n        <AppBar numJobs={numJobs} />\n          <Grid container>\n            <Grid item xs={12}>\n              <Stepper \n                numPages={numPages} \n                activeStep={activeStep} \n                handleNext={() => this.handleNext()} \n                handleBack={() => this.handleBack()}\n              />\n              <Typography variant=\"h6\" component=\"h1\">\n                Showing {activeStep * 50} - {(activeStep * 50) + 50}\n              </Typography>\n            </Grid>\n          </Grid>\n          <Grid container direction=\"column\">\n            <Grid container direction=\"column\">\n              <Grid item xs={3} justify=\"space-between\">\n                <Card>\n                  <Switch \n                    handleChange={this.handleChange} \n                    switchState={switchState}\n                    labelsArr={typeNamesArr}\n                  />\n                </Card>\n                <br />\n                <Card>\n                  <Typography variant=\"h6\">\n                    Remote jobs count\n                  </Typography>\n                  <ReactMinimalPieChart\n                    data={[\n                      {\n                        title: 'Remote',\n                        value: remoteJobs.length,\n                        color: '#E38627'\n                      },\n                      {\n                        title: 'Non-remote',\n                        value: (jobsData.length - remoteJobs.length),\n                        color: '#C13C37'\n                      }\n                    ]}\n                    lineWidth={15}\n                    rounded\n                    label\n                    labelStyle={{\n                      fontSize: '10px',\n                      fontFamily: 'sans-serif'\n                    }}\n                    style={{height:'200px'}}\n                    labelPosition={60}\n                    animate\n                  />\n                </Card>\n              </Grid>\n            </Grid>\n            <Grid container direction=\"column\">\n              <Grid item xs={5} justify=\"space-between\">\n              {\n                jobsOnPage.map(\n                  ( job,i ) => <Job key={i} job={job} onClick={() => {\n                                  this.handleModalOpen()\n                                  this.setState({\n                                    selectedJob: job\n                                  });\n                                }}\n                                />\n                )\n              }\n              </Grid>\n            </Grid>\n          {/* <Grid item xs={12}>\n            <div>\n              Page { activeStep + 1 } of { numPages }\n            </div>\n            <Stepper \n              numPages={numPages} \n              activeStep={activeStep} \n              handleNext={() => this.handleNext()} \n              handleBack={() => this.handleBack()}\n            />\n          </Grid> */}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Jobs;\n\n\n\n//OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n\n// export default function Jobs({jobs}) {\n  \n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n  \n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n\n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n    \n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n\n//   function handleModalOpen() {\n//     setOpen(true);\n//   }\n\n//   function handleModalClose() {\n//     setOpen(false);\n//   }\n\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleModalClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleModalOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}