{"ast":null,"code":"import _objectSpread from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js\";\nimport React, { Component } from 'react';\nimport Job from './Job';\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedJob: {},\n      switchState: {\n        partTime: true,\n        fullTime: true,\n        contract: false\n      },\n      activeStep: 0,\n      jobsData: this.props.jobs\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.jobs !== this.props.jobs) {\n      this.setState({\n        jobsData: this.props.jobs\n      });\n    } // this.filterJobsbyType();\n\n  }\n\n  filterJobsbyType(name) {\n    console.log(\"function called\", name);\n    let partTimeJobs = [];\n    let fullTimeJobs = [];\n    let contractJobs = [];\n    let filteredJobs = [];\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n    if (name === 'partTime') {\n      // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n      this.setState({\n        jobsData: this.state.jobsData.filter(job => this.state.switchState.partTime === true && job.type === \"Part Time\")\n      }); // setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n\n      console.log('switch case: ', name, this.state.switchState.name, this.state.jobsData[0].type);\n    } // if(name === 'fullTime'){\n    //   // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n    //   // setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n    //   // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    // }        \n    // if(name === 'contract') {\n    //   // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n    //   // setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n    //   // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    // }\n\n\n    return this.state.jobsData.length === 0 ? null : this.state.jobsData.jobsData;\n  }\n\n  handleChange(name, event) {\n    // setSwitchState({ ...switchState, [name]: event.target.checked });\n    this.setState({\n      switchState: _objectSpread({}, this.state.switchState, {\n        [name]: event.target.checked\n      })\n    });\n    this.filterJobsbyType(this.props.jobs, name);\n  }\n\n  //modal open and close\n  handleModalOpen() {\n    this.setState({\n      open: true\n    }); // setOpen(true);\n  }\n\n  handleModalClose() {\n    this.setState({\n      open: false\n    }); // setOpen(false);\n  } //pagination\n\n\n  handleNext() {\n    this.setState(prevState => {\n      return {\n        activeStep: prevState.activeStep + 1\n      };\n    }); // setActiveStep(prevActiveStep => prevActiveStep + 1);\n\n    window.scrollTo(0, 0);\n  }\n\n  handleBack() {\n    this.setState(prevState => {\n      return {\n        activeStep: prevState.activeStep - 1\n      };\n    }); // setActiveStep(prevActiveStep => prevActiveStep - 1);\n\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    console.log(\"jobsData:\", this.state.jobsData);\n    console.log(\"jobs render:\", this.props.jobs);\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n    const _this$state = this.state,\n          open = _this$state.open,\n          selectedJob = _this$state.selectedJob,\n          switchState = _this$state.switchState,\n          activeStep = _this$state.activeStep,\n          jobsData = _this$state.jobsData;\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs / 50);\n    const jobsOnPage = jobsData.slice(activeStep * 50, activeStep * 50 + 50); // console.log(\"switchState: \", switchState);\n\n    return React.createElement(\"div\", {\n      className: \"jobs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(JobModal, {\n      open: open,\n      handleClose: () => this.handleModalClose(),\n      job: selectedJob,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Entry level software jobs\"), React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Found \", numJobs, \" Jobs\"), React.createElement(Typography, {\n      variant: \"h6\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Showing \", activeStep * 50, \" - \", activeStep * 50 + 50), React.createElement(Switch, {\n      handleChange: this.handleChange,\n      switchState: switchState,\n      labelsArr: typeNamesArr,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => this.handleNext(),\n      handleBack: () => this.handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), jobsOnPage.map((job, i) => React.createElement(Job, {\n      key: i,\n      job: job,\n      onClick: () => {\n        this.handleModalOpen(); // selectJob(job)\n\n        this.setState({\n          selectedJob: job\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Page \", activeStep + 1, \" of \", numPages), React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => this.handleNext(),\n      handleBack: () => this.handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Jobs; //OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n// export default function Jobs({jobs}) {\n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n//   function handleModalOpen() {\n//     setOpen(true);\n//   }\n//   function handleModalClose() {\n//     setOpen(false);\n//   }\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleModalClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleModalOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js"],"names":["React","Component","Job","Typography","JobModal","Stepper","Switch","Jobs","constructor","props","state","open","selectedJob","switchState","partTime","fullTime","contract","activeStep","jobsData","jobs","handleChange","bind","componentDidUpdate","prevProps","prevState","setState","filterJobsbyType","name","console","log","partTimeJobs","fullTimeJobs","contractJobs","filteredJobs","typeNamesArr","filter","job","type","length","event","target","checked","handleModalOpen","handleModalClose","handleNext","window","scrollTo","handleBack","render","numJobs","numPages","Math","ceil","jobsOnPage","slice","map","i"],"mappings":"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":["import React, { Component } from 'react';\nimport Job from './Job'\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false,\n                   selectedJob: {},\n                   switchState: {\n                    partTime: true,\n                    fullTime: true,\n                    contract: false,\n                  },\n                  activeStep: 0,\n                  jobsData: this.props.jobs\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(prevProps.jobs !== this.props.jobs) {\n      this.setState({ jobsData: this.props.jobs });\n    }\n    // this.filterJobsbyType();\n  }\n\n  \n\n  filterJobsbyType (name) {\n    console.log(\"function called\", name);\n    let partTimeJobs = [];\n    let fullTimeJobs = [];\n    let contractJobs = [];\n    let filteredJobs = [];\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n    if(name === 'partTime') {\n      // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n      this.setState({ jobsData: this.state.jobsData.filter(job => this.state.switchState.partTime === true && job.type === \"Part Time\")})\n      // setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n      console.log('switch case: ', name, this.state.switchState.name, this.state.jobsData[0].type);\n    }\n    // if(name === 'fullTime'){\n    //   // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n    //   // setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n    //   // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    // }        \n\n    // if(name === 'contract') {\n    //   // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n    //   // setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n    //   // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    // }\n    \n    return this.state.jobsData.length === 0 ? null : this.state.jobsData.jobsData;\n  }\n\n      handleChange(name, event) {\n        // setSwitchState({ ...switchState, [name]: event.target.checked });\n        this.setState({ \n          switchState: {...this.state.switchState, [name]: event.target.checked}\n        });\n        this.filterJobsbyType(this.props.jobs, name);\n      };\n\n      //modal open and close\n      handleModalOpen() {\n        this.setState({\n          open: true\n        })\n        // setOpen(true);\n      }\n  \n      handleModalClose() {\n        this.setState({\n          open: false\n        })\n        // setOpen(false);\n      }\n      \n      //pagination\n      handleNext() {\n        this.setState((prevState) => {\n          return {activeStep: prevState.activeStep + 1}\n        })\n        // setActiveStep(prevActiveStep => prevActiveStep + 1);\n        window.scrollTo(0, 0)\n      }\n  \n      handleBack() {\n        this.setState((prevState) => {\n          return {activeStep: prevState.activeStep - 1}\n        });\n        // setActiveStep(prevActiveStep => prevActiveStep - 1);\n        window.scrollTo(0, 0)\n      }\n  \n  render() {\n    console.log(\"jobsData:\", this.state.jobsData);\n    console.log(\"jobs render:\", this.props.jobs)\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n    const {open, selectedJob, switchState, activeStep, jobsData } = this.state;\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs/50);\n    const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n    // console.log(\"switchState: \", switchState);\n\n    \n    \n    return (\n      <div className='jobs'>\n      <JobModal \n        open={open} \n        handleClose={() => this.handleModalClose()} \n        job={selectedJob} \n      />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry level software jobs\n      </Typography>\n      <Typography variant=\"h6\">\n        Found {numJobs} Jobs\n        {/* that fit {searchCriteria} */}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h1\">\n        Showing {activeStep * 50} - {(activeStep * 50) + 50}\n      </Typography>\n      <Switch \n        handleChange={this.handleChange} \n        switchState={switchState}\n        labelsArr={typeNamesArr}\n      />\n            <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => this.handleNext()} \n        handleBack={() => this.handleBack()}\n      />\n      {\n        jobsOnPage.map(\n          ( job,i ) => <Job key={i} job={job} onClick={() => {\n                          this.handleModalOpen()\n                          // selectJob(job)\n                          this.setState({\n                            selectedJob: job\n                          });\n                        }}\n                        />\n        )\n      }\n      <div>\n        Page { activeStep + 1 } of { numPages }\n      </div>\n      <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => this.handleNext()} \n        handleBack={() => this.handleBack()}\n      />\n        \n      </div>\n    );\n  }\n}\n\nexport default Jobs;\n\n\n\n//OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n\n// export default function Jobs({jobs}) {\n  \n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n  \n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n\n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n    \n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n\n//   function handleModalOpen() {\n//     setOpen(true);\n//   }\n\n//   function handleModalClose() {\n//     setOpen(false);\n//   }\n\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleModalClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleModalOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}