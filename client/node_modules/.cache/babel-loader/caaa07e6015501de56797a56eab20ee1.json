{"ast":null,"code":"import _objectSpread from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js\";\nimport React from 'react';\nimport Job from './Job';\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\nexport default function Jobs({\n  jobs\n}) {\n  let filteredJobs = []; // React.useEffect(() => {\n  //   filterJobsbyType(jobs);\n  //   // console.log(`You clicked 5 times`);\n  // },[]);\n  //switches\n\n  const _React$useState = React.useState({\n    partTime: false,\n    fullTime: false,\n    contract: true\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        switchState = _React$useState2[0],\n        setSwitchState = _React$useState2[1];\n\n  const _React$useState3 = React.useState(jobs),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        jobsData = _React$useState4[0],\n        setJobsData = _React$useState4[1];\n\n  const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n  const handleChange = name => event => {\n    filterJobsbyType(jobs, name);\n    setSwitchState(_objectSpread({}, switchState, {\n      [name]: event.target.checked\n    }));\n  };\n\n  function filterJobsbyType(jobs, name) {\n    // console.log(\"function called\", name);\n    let partTimeJobs = [];\n    let fullTimeJobs = [];\n    let contractJobs = [];\n\n    if (name === 'partTime') {\n      partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]); // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n\n    if (name === 'fullTime') {\n      fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]); // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n\n    if (name === 'contract') {\n      contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]); // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n\n    setJobsData([...partTimeJobs, ...fullTimeJobs, ...contractJobs]);\n    console.log(\"return: \", filteredJobs.length === 0 ? jobs : filteredJobs);\n    console.log(\"jobsData in func: \", jobsData.jobs);\n    return filteredJobs.length === 0 ? jobs : filteredJobs;\n  } //pagination\n\n\n  console.log(\"jobsData: \", jobsData.jobs);\n  const numJobs = jobsData.jobs.length;\n  console.log(\"numJobs: \", numJobs);\n  const numPages = Math.ceil(numJobs / 50);\n\n  const _React$useState5 = React.useState(0),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        activeStep = _React$useState6[0],\n        setActiveStep = _React$useState6[1];\n\n  const jobsOnPage = jobsData.jobs.slice(activeStep * 50, activeStep * 50 + 50);\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    window.scrollTo(0, 0);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n    window.scrollTo(0, 0);\n  } //Modal\n\n\n  const _React$useState7 = React.useState(false),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        open = _React$useState8[0],\n        setOpen = _React$useState8[1];\n\n  const _React$useState9 = React.useState({}),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        selectedJob = _React$useState10[0],\n        selectJob = _React$useState10[1];\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  } //TODO add search for terma that go to algo. seperated by commas?\n\n\n  return React.createElement(\"div\", {\n    className: \"jobs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(JobModal, {\n    open: open,\n    handleClose: handleClose,\n    job: selectedJob,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Entry level software jobs\"), React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Found \", numJobs, \" Jobs\"), React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Showing \", activeStep * 50, \" - \", activeStep * 50 + 50), React.createElement(Switch, {\n    handleChange: handleChange,\n    switchState: switchState,\n    labelsArr: typeNamesArr,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), jobsOnPage.map((job, i) => React.createElement(Job, {\n    key: i,\n    job: job,\n    onClick: () => {\n      handleClickOpen();\n      selectJob(job);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Page \", activeStep + 1, \" of \", numPages), React.createElement(Stepper, {\n    numPages: numPages,\n    activeStep: activeStep,\n    handleNext: () => handleNext(),\n    handleBack: () => handleBack(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js"],"names":["React","Job","Typography","JobModal","Stepper","Switch","Jobs","jobs","filteredJobs","useState","partTime","fullTime","contract","switchState","setSwitchState","jobsData","setJobsData","typeNamesArr","handleChange","name","event","filterJobsbyType","target","checked","partTimeJobs","fullTimeJobs","contractJobs","filter","job","type","console","log","length","numJobs","numPages","Math","ceil","activeStep","setActiveStep","jobsOnPage","slice","handleNext","prevActiveStep","window","scrollTo","handleBack","open","setOpen","selectedJob","selectJob","handleClickOpen","handleClose","map","i"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Job from './Job'\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nexport default function Jobs({jobs}) {\n  let filteredJobs = [];\n  // React.useEffect(() => {\n  //   filterJobsbyType(jobs);\n  //   // console.log(`You clicked 5 times`);\n  // },[]);\n\n  //switches\n  \n  const [switchState, setSwitchState] = React.useState({\n    partTime: false,\n    fullTime: false,\n    contract: true,\n  });\n\n  const [jobsData, setJobsData] = React.useState(\n    jobs\n  )\n\n  const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n  const handleChange = name => event => {\n    filterJobsbyType(jobs, name);\n    setSwitchState({ ...switchState, [name]: event.target.checked });\n  };\n\n  function filterJobsbyType (jobs, name) {\n    // console.log(\"function called\", name);\n    let partTimeJobs = [];\n    let fullTimeJobs = [];\n    let contractJobs = [];\n    \n    if(name === 'partTime') {\n      partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n      // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n    if(name === 'fullTime'){\n      fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n      // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }        \n\n    if(name === 'contract') {\n      contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n      // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n \n    setJobsData([...partTimeJobs, ...fullTimeJobs, ...contractJobs]);\n      console.log(\"return: \",  filteredJobs.length === 0 ? jobs : filteredJobs)\n      console.log(\"jobsData in func: \", jobsData.jobs);\n\n    return filteredJobs.length === 0 ? jobs : filteredJobs;\n  }\n\n  //pagination\n  console.log(\"jobsData: \", jobsData.jobs);\n  const numJobs = jobsData.jobs.length;\n  console.log(\"numJobs: \", numJobs);\n  const numPages = Math.ceil(numJobs/50);\n  const [activeStep, setActiveStep] = React.useState(0);\n  const jobsOnPage = jobsData.jobs.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    window.scrollTo(0, 0)\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n    window.scrollTo(0, 0)\n  }\n\n  //Modal\n  const [open, setOpen] = React.useState(false);\n  const [selectedJob, selectJob] = React.useState({});\n\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  function handleClose() {\n    setOpen(false);\n  }\n\n\n//TODO add search for terma that go to algo. seperated by commas?\n  return (\n    <div className='jobs'>\n      <JobModal \n        open={open} \n        handleClose={handleClose} \n        job={selectedJob} \n      />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry level software jobs\n      </Typography>\n      <Typography variant=\"h6\">\n        Found {numJobs} Jobs\n        {/* that fit {searchCriteria} */}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h1\">\n        Showing {activeStep * 50} - {(activeStep * 50) + 50}\n      </Typography>\n      <Switch \n        handleChange={handleChange} \n        switchState={switchState}\n        labelsArr={typeNamesArr}\n      />\n      {\n        jobsOnPage.map(\n          ( job,i ) => <Job key={i} job={job} onClick={() => {\n                          handleClickOpen()\n                          selectJob(job)\n                          }}\n                        />\n        )\n      }\n      <div>\n        Page { activeStep + 1 } of { numPages }\n      </div>\n      <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => handleNext()} \n        handleBack={() => handleBack()}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}