{"ast":null,"code":"import _objectSpread from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js\";\n// import React, { Component } from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n// class Jobs extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { open: false,\n//                    selectedJob: {},\n//                    switchState: {\n//                     partTime: true,\n//                     fullTime: true,\n//                     contract: false,\n//                   },\n//                   activeStep: 0,\n//                   jobsData: this.props.jobs\n//     } ;\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n//   componentWillMount() {\n//     // filterJobsbyType(jobs, name);\n//     this.setState({\n//       jobsData: this.props.jobs\n//     })\n//   }\n//   // componentDidMount() {\n//   //   // filterJobsbyType(jobs, name);\n//   //   this.setState({\n//   //     jobsData: this.props.jobs\n//   //   })\n//   // }\n//   // filterJobsbyType (jobs, name) {\n//   //   // console.log(\"function called\", name);\n//   //   // let partTimeJobs = [];\n//   //   // let fullTimeJobs = [];\n//   //   // let contractJobs = [];\n//   //   // let filteredJobs = [];\n//   //   if(name === 'partTime') {\n//   //     // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//   //     setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//   //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//   //   }\n//   //   if(name === 'fullTime'){\n//   //     // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//   //     setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//   //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//   //   }        \n//   //   if(name === 'contract') {\n//   //     // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//   //     setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//   //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//   //   }\n//   //   return jobsData.length === 0 ? jobs : jobsData;\n//   // }\n//       handleChange(name, event) {\n//         // setSwitchState({ ...switchState, [name]: event.target.checked });\n//         this.setState({ \n//           switchState: {...this.state.switchState, [name]: event.target.checked}\n//         });\n//         // filterJobsbyType(this.props.jobs, name);\n//       };\n//       //modal open and close\n//       handleModalOpen() {\n//         this.setState({\n//           open: true\n//         })\n//         // setOpen(true);\n//       }\n//       handleModalClose() {\n//         this.setState({\n//           open: false\n//         })\n//         // setOpen(false);\n//       }\n//       //pagination\n//       handleNext() {\n//         this.setState((prevState) => {\n//           return {activeStep: prevState.activeStep + 1}\n//         })\n//         // setActiveStep(prevActiveStep => prevActiveStep + 1);\n//         window.scrollTo(0, 0)\n//       }\n//       handleBack() {\n//         this.setState((prevState) => {\n//           return {activeStep: prevState.activeStep - 1}\n//         });\n//         // setActiveStep(prevActiveStep => prevActiveStep - 1);\n//         window.scrollTo(0, 0)\n//       }\n//   render() {\n//     console.log(\"jobsData:\", this.state.jobsData);\n//     const {open, selectedJob, switchState, activeStep, jobsData } = this.state;\n//     const numJobs = this.props.jobs.length;\n//     const numPages = Math.ceil(numJobs/50);\n//     const jobsOnPage = this.props.jobs.slice( activeStep * 50, (activeStep * 50) + 50 );\n//     console.log(\"switchState: \", switchState);\n//     //switches\n//     const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n//     return (\n//       <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={() => this.handleModalClose()} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={this.handleChange} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => this.handleNext()} \n//         handleBack={() => this.handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           this.handleModalOpen()\n//                           // selectJob(job)\n//                           this.setState({\n//                             selectedJob: job\n//                           });\n//                         }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => this.handleNext()} \n//         handleBack={() => this.handleBack()}\n//       />\n//       </div>\n//     );\n//   }\n// }\n// export default Jobs;\n// OLD FUNCTION COMPONENT WITH HOOKS\nimport React from 'react';\nimport Job from './Job';\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\nexport default function Jobs({\n  jobs\n}) {\n  // React.useEffect(() => {\n  //   filterJobsbyType(jobs);\n  //   // console.log(`You clicked 5 times`);\n  // },[jobs]);\n  //switches\n  const _React$useState = React.useState({\n    partTime: true,\n    fullTime: true,\n    contract: false\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        switchState = _React$useState2[0],\n        setSwitchState = _React$useState2[1];\n\n  const _React$useState3 = React.useState(jobs),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        jobsData = _React$useState4[0],\n        setJobsData = _React$useState4[1];\n\n  const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n  const handleChange = name => event => {\n    setSwitchState(_objectSpread({}, switchState, {\n      [name]: event.target.checked\n    }));\n    filterJobsbyType(jobs, name);\n  };\n\n  function filterJobsbyType(jobs, name) {\n    // console.log(\"function called\", name);\n    // let partTimeJobs = [];\n    // let fullTimeJobs = [];\n    // let contractJobs = [];\n    // let filteredJobs = [];\n    if (name === 'partTime') {\n      // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n      setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0])); // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n\n    if (name === 'fullTime') {\n      // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n      setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1])); // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n\n    if (name === 'contract') {\n      // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n      setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2])); // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n\n    return jobsData.length === 0 ? jobs : jobsData;\n  } //pagination\n\n\n  console.log(\"jobsData: \", jobsData);\n  const numJobs = jobsData.length;\n  const numPages = Math.ceil(numJobs / 50);\n\n  const _React$useState5 = React.useState(0),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        activeStep = _React$useState6[0],\n        setActiveStep = _React$useState6[1];\n\n  const jobsOnPage = jobsData.slice(activeStep * 50, activeStep * 50 + 50);\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    window.scrollTo(0, 0);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n    window.scrollTo(0, 0);\n  } //Modal\n\n\n  const _React$useState7 = React.useState(false),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        open = _React$useState8[0],\n        setOpen = _React$useState8[1];\n\n  const _React$useState9 = React.useState({}),\n        _React$useState10 = _slicedToArray(_React$useState9, 2),\n        selectedJob = _React$useState10[0],\n        selectJob = _React$useState10[1];\n\n  function handleModalOpen() {\n    setOpen(true);\n  }\n\n  function handleModalClose() {\n    setOpen(false);\n  } //TODO add search for terms that go to algo. seperated by commas?\n\n\n  return React.createElement(\"div\", {\n    className: \"jobs\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, React.createElement(JobModal, {\n    open: open,\n    handleClose: handleModalClose,\n    job: selectedJob,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    variant: \"h4\",\n    component: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, \"Entry level software jobs\"), React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, \"Found \", numJobs, \" Jobs\"), React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, \"Showing \", activeStep * 50, \" - \", activeStep * 50 + 50), React.createElement(Switch, {\n    handleChange: () => handleChange(),\n    switchState: switchState,\n    labelsArr: typeNamesArr,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }), React.createElement(Stepper, {\n    numPages: numPages,\n    activeStep: activeStep,\n    handleNext: () => handleNext(),\n    handleBack: () => handleBack(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }), jobsOnPage.map((job, i) => React.createElement(Job, {\n    key: i,\n    job: job,\n    onClick: () => {\n      handleModalOpen();\n      selectJob(job);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, \"Page \", activeStep + 1, \" of \", numPages), React.createElement(Stepper, {\n    numPages: numPages,\n    activeStep: activeStep,\n    handleNext: () => handleNext(),\n    handleBack: () => handleBack(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js"],"names":["React","Job","Typography","JobModal","Stepper","Switch","Jobs","jobs","useState","partTime","fullTime","contract","switchState","setSwitchState","jobsData","setJobsData","typeNamesArr","handleChange","name","event","target","checked","filterJobsbyType","filter","job","type","length","console","log","numJobs","numPages","Math","ceil","activeStep","setActiveStep","jobsOnPage","slice","handleNext","prevActiveStep","window","scrollTo","handleBack","open","setOpen","selectedJob","selectJob","handleModalOpen","handleModalClose","map","i"],"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","sourcesContent":["// import React, { Component } from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n\n// class Jobs extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { open: false,\n//                    selectedJob: {},\n//                    switchState: {\n//                     partTime: true,\n//                     fullTime: true,\n//                     contract: false,\n//                   },\n//                   activeStep: 0,\n//                   jobsData: this.props.jobs\n//     } ;\n//     this.handleChange = this.handleChange.bind(this);\n//   }\n\n//   componentWillMount() {\n//     // filterJobsbyType(jobs, name);\n//     this.setState({\n//       jobsData: this.props.jobs\n//     })\n//   }\n\n//   // componentDidMount() {\n//   //   // filterJobsbyType(jobs, name);\n//   //   this.setState({\n//   //     jobsData: this.props.jobs\n//   //   })\n//   // }\n\n//   // filterJobsbyType (jobs, name) {\n//   //   // console.log(\"function called\", name);\n//   //   // let partTimeJobs = [];\n//   //   // let fullTimeJobs = [];\n//   //   // let contractJobs = [];\n//   //   // let filteredJobs = [];\n\n//   //   if(name === 'partTime') {\n//   //     // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//   //     setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//   //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//   //   }\n//   //   if(name === 'fullTime'){\n//   //     // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//   //     setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//   //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//   //   }        \n\n//   //   if(name === 'contract') {\n//   //     // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//   //     setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//   //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//   //   }\n    \n//   //   return jobsData.length === 0 ? jobs : jobsData;\n//   // }\n\n//       handleChange(name, event) {\n//         // setSwitchState({ ...switchState, [name]: event.target.checked });\n//         this.setState({ \n//           switchState: {...this.state.switchState, [name]: event.target.checked}\n//         });\n//         // filterJobsbyType(this.props.jobs, name);\n//       };\n\n//       //modal open and close\n//       handleModalOpen() {\n//         this.setState({\n//           open: true\n//         })\n//         // setOpen(true);\n//       }\n  \n//       handleModalClose() {\n//         this.setState({\n//           open: false\n//         })\n//         // setOpen(false);\n//       }\n      \n//       //pagination\n//       handleNext() {\n//         this.setState((prevState) => {\n//           return {activeStep: prevState.activeStep + 1}\n//         })\n//         // setActiveStep(prevActiveStep => prevActiveStep + 1);\n//         window.scrollTo(0, 0)\n//       }\n  \n//       handleBack() {\n//         this.setState((prevState) => {\n//           return {activeStep: prevState.activeStep - 1}\n//         });\n//         // setActiveStep(prevActiveStep => prevActiveStep - 1);\n//         window.scrollTo(0, 0)\n//       }\n  \n//   render() {\n//     console.log(\"jobsData:\", this.state.jobsData);\n//     const {open, selectedJob, switchState, activeStep, jobsData } = this.state;\n//     const numJobs = this.props.jobs.length;\n//     const numPages = Math.ceil(numJobs/50);\n//     const jobsOnPage = this.props.jobs.slice( activeStep * 50, (activeStep * 50) + 50 );\n//     console.log(\"switchState: \", switchState);\n\n//     //switches\n//     const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n    \n//     return (\n//       <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={() => this.handleModalClose()} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={this.handleChange} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => this.handleNext()} \n//         handleBack={() => this.handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           this.handleModalOpen()\n//                           // selectJob(job)\n//                           this.setState({\n//                             selectedJob: job\n//                           });\n//                         }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => this.handleNext()} \n//         handleBack={() => this.handleBack()}\n//       />\n        \n//       </div>\n//     );\n//   }\n// }\n\n// export default Jobs;\n\n\n\n// OLD FUNCTION COMPONENT WITH HOOKS\nimport React from 'react';\nimport Job from './Job'\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nexport default function Jobs({jobs}) {\n  \n  // React.useEffect(() => {\n  //   filterJobsbyType(jobs);\n  //   // console.log(`You clicked 5 times`);\n  // },[jobs]);\n\n  //switches\n  const [switchState, setSwitchState] = React.useState({\n    partTime: true,\n    fullTime: true,\n    contract: false,\n  });\n  const [jobsData, setJobsData] = React.useState(jobs);\n\n  const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n  const handleChange = name => event => {\n    setSwitchState({ ...switchState, [name]: event.target.checked });\n    filterJobsbyType(jobs, name);\n  };\n  \n  function filterJobsbyType (jobs, name) {\n    // console.log(\"function called\", name);\n    // let partTimeJobs = [];\n    // let fullTimeJobs = [];\n    // let contractJobs = [];\n    // let filteredJobs = [];\n\n    if(name === 'partTime') {\n      // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n      setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n      // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n    if(name === 'fullTime'){\n      // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n      setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n      // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }        \n\n    if(name === 'contract') {\n      // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n      setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n      // console.log('switch case: ', name, switchState.name, jobs[0].type);\n    }\n    \n    return jobsData.length === 0 ? jobs : jobsData;\n  }\n\n  //pagination\n  console.log(\"jobsData: \", jobsData)\n  const numJobs = jobsData.length;\n  const numPages = Math.ceil(numJobs/50);\n  const [activeStep, setActiveStep] = React.useState(0);\n  const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n  function handleNext() {\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    window.scrollTo(0, 0)\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n    window.scrollTo(0, 0)\n  }\n\n  //Modal\n  const [open, setOpen] = React.useState(false);\n  const [selectedJob, selectJob] = React.useState({});\n\n  function handleModalOpen() {\n    setOpen(true);\n  }\n\n  function handleModalClose() {\n    setOpen(false);\n  }\n\n//TODO add search for terms that go to algo. seperated by commas?\n  return (\n    <div className='jobs'>\n      <JobModal \n        open={open} \n        handleClose={handleModalClose} \n        job={selectedJob} \n      />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry level software jobs\n      </Typography>\n      <Typography variant=\"h6\">\n        Found {numJobs} Jobs\n        {/* that fit {searchCriteria} */}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h1\">\n        Showing {activeStep * 50} - {(activeStep * 50) + 50}\n      </Typography>\n      <Switch \n        handleChange={() => handleChange()} \n        switchState={switchState}\n        labelsArr={typeNamesArr}\n      />\n            <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => handleNext()} \n        handleBack={() => handleBack()}\n      />\n      {\n        jobsOnPage.map(\n          ( job,i ) => <Job key={i} job={job} onClick={() => {\n                          handleModalOpen()\n                          selectJob(job)\n                          }}\n                        />\n        )\n      }\n      <div>\n        Page { activeStep + 1 } of { numPages }\n      </div>\n      <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => handleNext()} \n        handleBack={() => handleBack()}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}