{"ast":null,"code":"var _jsxFileName = \"/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js\";\nimport React, { Component } from 'react';\nimport Job from './Job';\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedJob: {},\n      switchState: {\n        partTime: true,\n        fullTime: true,\n        contract: false\n      },\n      activeStep: 0,\n      jobsData: []\n    };\n  } // filterJobsbyType (jobs, name) {\n  //   // console.log(\"function called\", name);\n  //   // let partTimeJobs = [];\n  //   // let fullTimeJobs = [];\n  //   // let contractJobs = [];\n  //   // let filteredJobs = [];\n  //   if(name === 'partTime') {\n  //     // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n  //     setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n  //   if(name === 'fullTime'){\n  //     // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n  //     setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }        \n  //   if(name === 'contract') {\n  //     // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n  //     setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n  //   return jobsData.length === 0 ? jobs : jobsData;\n  // }\n  // componentWillMount() {\n  //   filterJobsbyType(jobs, name);\n  // }\n  //modal open and close\n\n\n  handleClickOpen() {\n    this.setState({\n      open: true\n    }); // setOpen(true);\n  }\n\n  handleClose() {\n    this.setState({\n      open: false\n    }); // setOpen(false);\n  } //pagination\n  // console.log(\"jobsData: \", jobsData)\n\n\n  handleNext() {\n    this.setState({\n      activeStep: prevActiveStep => prevActiveStep + 1\n    }); // setActiveStep(prevActiveStep => prevActiveStep + 1);\n\n    window.scrollTo(0, 0);\n  }\n\n  handleBack() {\n    this.setState({\n      activeStep: prevActiveStep => prevActiveStep - 1\n    }); // setActiveStep(prevActiveStep => prevActiveStep - 1);\n\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const _this$state = this.state,\n          open = _this$state.open,\n          selectedJob = _this$state.selectedJob,\n          switchState = _this$state.switchState,\n          activeStep = _this$state.activeStep,\n          jobsData = _this$state.jobsData;\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs / 50);\n    const jobsOnPage = jobsData.slice(activeStep * 50, activeStep * 50 + 50);\n    console.log(\"test: \", this.state); //switches\n\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"]; // const handleChange = name => event => {\n    //   setSwitchState({ ...switchState, [name]: event.target.checked });\n    //   // filterJobsbyType(this.props.jobs, name);\n    // };\n\n    return React.createElement(\"div\", {\n      className: \"jobs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(JobModal, {\n      open: open,\n      handleClose: this.handleClose,\n      job: selectedJob,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Entry level software jobs\"), React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Found \", numJobs, \" Jobs\"), React.createElement(Typography, {\n      variant: \"h6\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Showing \", activeStep * 50, \" - \", activeStep * 50 + 50), React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => this.handleNext(),\n      handleBack: () => this.handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), jobsOnPage.map((job, i) => React.createElement(Job, {\n      key: i,\n      job: job,\n      onClick: () => {\n        this.handleClickOpen(); // selectJob(job)\n\n        this.setState({\n          selectedJob: job\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Page \", activeStep + 1, \" of \", numPages), React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => this.handleNext(),\n      handleBack: () => this.handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Jobs; //OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n// export default function Jobs({jobs}) {\n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n//   function handleClickOpen() {\n//     setOpen(true);\n//   }\n//   function handleClose() {\n//     setOpen(false);\n//   }\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleClickOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js"],"names":["React","Component","Job","Typography","JobModal","Stepper","Switch","Jobs","constructor","props","state","open","selectedJob","switchState","partTime","fullTime","contract","activeStep","jobsData","handleClickOpen","setState","handleClose","handleNext","prevActiveStep","window","scrollTo","handleBack","render","numJobs","length","numPages","Math","ceil","jobsOnPage","slice","console","log","typeNamesArr","map","job","i"],"mappings":"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":["import React, { Component } from 'react';\nimport Job from './Job'\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false,\n                   selectedJob: {},\n                   switchState: {\n                    partTime: true,\n                    fullTime: true,\n                    contract: false,\n                  },\n                  activeStep: 0,\n                  jobsData: []\n    } ;\n  }\n\n  // filterJobsbyType (jobs, name) {\n  //   // console.log(\"function called\", name);\n  //   // let partTimeJobs = [];\n  //   // let fullTimeJobs = [];\n  //   // let contractJobs = [];\n  //   // let filteredJobs = [];\n\n  //   if(name === 'partTime') {\n  //     // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n  //     setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n  //   if(name === 'fullTime'){\n  //     // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n  //     setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }        \n\n  //   if(name === 'contract') {\n  //     // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n  //     setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n    \n  //   return jobsData.length === 0 ? jobs : jobsData;\n  // }\n\n  \n  // componentWillMount() {\n  //   filterJobsbyType(jobs, name);\n  // }\n\n      //modal open and close\n      handleClickOpen() {\n        this.setState({\n          open: true\n        })\n        // setOpen(true);\n      }\n  \n      handleClose() {\n        this.setState({\n          open: false\n        })\n        // setOpen(false);\n      }\n      \n      //pagination\n      // console.log(\"jobsData: \", jobsData)\n\n  \n      handleNext() {\n        this.setState({\n          activeStep: (prevActiveStep => prevActiveStep + 1)\n        });\n        // setActiveStep(prevActiveStep => prevActiveStep + 1);\n        window.scrollTo(0, 0)\n      }\n  \n      handleBack() {\n        this.setState({\n          activeStep: prevActiveStep => prevActiveStep - 1\n        });\n        // setActiveStep(prevActiveStep => prevActiveStep - 1);\n        window.scrollTo(0, 0)\n      }\n  \n\n  render() {\n    const {open, selectedJob, switchState, activeStep, jobsData } = this.state;\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs/50);\n    const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n    console.log(\"test: \", this.state);\n\n    //switches\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n    // const handleChange = name => event => {\n    //   setSwitchState({ ...switchState, [name]: event.target.checked });\n    //   // filterJobsbyType(this.props.jobs, name);\n    // };\n    \n    return (\n      <div className='jobs'>\n      <JobModal \n        open={open} \n        handleClose={this.handleClose} \n        job={selectedJob} \n      />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry level software jobs\n      </Typography>\n      <Typography variant=\"h6\">\n        Found {numJobs} Jobs\n        {/* that fit {searchCriteria} */}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h1\">\n        Showing {activeStep * 50} - {(activeStep * 50) + 50}\n      </Typography>\n      {/* <Switch \n        handleChange={() => handleChange()} \n        switchState={switchState}\n        labelsArr={typeNamesArr}\n      /> */}\n            <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => this.handleNext()} \n        handleBack={() => this.handleBack()}\n      />\n      {\n        jobsOnPage.map(\n          ( job,i ) => <Job key={i} job={job} onClick={() => {\n                          this.handleClickOpen()\n                          // selectJob(job)\n                          this.setState({\n                            selectedJob: job\n                          });\n                        }}\n                        />\n        )\n      }\n      <div>\n        Page { activeStep + 1 } of { numPages }\n      </div>\n      <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => this.handleNext()} \n        handleBack={() => this.handleBack()}\n      />\n        \n      </div>\n    );\n  }\n}\n\nexport default Jobs;\n\n\n\n//OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n\n// export default function Jobs({jobs}) {\n  \n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n  \n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n\n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n    \n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n\n//   function handleClickOpen() {\n//     setOpen(true);\n//   }\n\n//   function handleClose() {\n//     setOpen(false);\n//   }\n\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleClickOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}