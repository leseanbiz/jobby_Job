{"ast":null,"code":"import _objectSpread from \"/Users/leseanjohnson/Documents/jobs-board/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js\";\nimport React, { Component } from 'react';\nimport Job from './Job';\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      selectedJob: {},\n      switchState: {\n        partTime: true,\n        fullTime: true,\n        contract: false\n      },\n      activeStep: 0,\n      jobsData: []\n    };\n  } // filterJobsbyType (jobs, name) {\n  //   // console.log(\"function called\", name);\n  //   // let partTimeJobs = [];\n  //   // let fullTimeJobs = [];\n  //   // let contractJobs = [];\n  //   // let filteredJobs = [];\n  //   if(name === 'partTime') {\n  //     // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n  //     setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n  //   if(name === 'fullTime'){\n  //     // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n  //     setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }        \n  //   if(name === 'contract') {\n  //     // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n  //     setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n  //   return jobsData.length === 0 ? jobs : jobsData;\n  // }\n  // componentWillMount() {\n  //   filterJobsbyType(jobs, name);\n  // }\n\n\n  render() {\n    const _this$state = this.state,\n          open = _this$state.open,\n          selectedJob = _this$state.selectedJob,\n          switchState = _this$state.switchState,\n          activeStep = _this$state.activeStep,\n          jobsData = _this$state.jobsData;\n    console.log(this.props); //switches\n\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n    const handleChange = name => event => {\n      setSwitchState(_objectSpread({}, switchState, {\n        [name]: event.target.checked\n      })); // filterJobsbyType(this.props.jobs, name);\n    }; //modal open and close\n\n\n    function handleClickOpen() {\n      setOpen(true);\n    }\n\n    function handleClose() {\n      setOpen(false);\n    } //pagination\n\n\n    console.log(\"jobsData: \", jobsData);\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs / 50);\n    const jobsOnPage = jobsData.slice(activeStep * 50, activeStep * 50 + 50);\n\n    function handleNext() {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n      window.scrollTo(0, 0);\n    }\n\n    function handleBack() {\n      setActiveStep(prevActiveStep => prevActiveStep - 1);\n      window.scrollTo(0, 0);\n    }\n\n    return React.createElement(\"div\", {\n      className: \"jobs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(JobModal, {\n      open: open,\n      handleClose: handleClose,\n      job: selectedJob,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      variant: \"h4\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Entry level software jobs\"), React.createElement(Typography, {\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Found \", numJobs, \" Jobs\"), React.createElement(Typography, {\n      variant: \"h6\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Showing \", activeStep * 50, \" - \", activeStep * 50 + 50), React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => handleNext(),\n      handleBack: () => handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), jobsOnPage.map((job, i) => React.createElement(Job, {\n      key: i,\n      job: job,\n      onClick: () => {\n        handleClickOpen();\n        selectJob(job);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Page \", activeStep + 1, \" of \", numPages), React.createElement(Stepper, {\n      numPages: numPages,\n      activeStep: activeStep,\n      handleNext: () => handleNext(),\n      handleBack: () => handleBack(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Jobs; //OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n// export default function Jobs({jobs}) {\n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n//   function handleClickOpen() {\n//     setOpen(true);\n//   }\n//   function handleClose() {\n//     setOpen(false);\n//   }\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleClickOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["/Users/leseanjohnson/Documents/jobs-board/client/src/components/Jobs.js"],"names":["React","Component","Job","Typography","JobModal","Stepper","Switch","Jobs","constructor","props","state","open","selectedJob","switchState","partTime","fullTime","contract","activeStep","jobsData","render","console","log","typeNamesArr","handleChange","name","event","setSwitchState","target","checked","handleClickOpen","setOpen","handleClose","numJobs","length","numPages","Math","ceil","jobsOnPage","slice","handleNext","setActiveStep","prevActiveStep","window","scrollTo","handleBack","map","job","i","selectJob"],"mappings":"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":["import React, { Component } from 'react';\nimport Job from './Job'\nimport { Typography } from '@material-ui/core';\nimport JobModal from '../components/JobModal';\nimport Stepper from '../components/Stepper';\nimport Switch from '../components/Switch';\n\nclass Jobs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { open: false,\n                   selectedJob: {},\n                   switchState: {\n                    partTime: true,\n                    fullTime: true,\n                    contract: false,\n                  },\n                  activeStep: 0,\n                  jobsData: []\n    } ;\n  }\n\n  // filterJobsbyType (jobs, name) {\n  //   // console.log(\"function called\", name);\n  //   // let partTimeJobs = [];\n  //   // let fullTimeJobs = [];\n  //   // let contractJobs = [];\n  //   // let filteredJobs = [];\n\n  //   if(name === 'partTime') {\n  //     // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n  //     setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n  //   if(name === 'fullTime'){\n  //     // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n  //     setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }        \n\n  //   if(name === 'contract') {\n  //     // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n  //     setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n  //     // console.log('switch case: ', name, switchState.name, jobs[0].type);\n  //   }\n    \n  //   return jobsData.length === 0 ? jobs : jobsData;\n  // }\n\n  \n  // componentWillMount() {\n  //   filterJobsbyType(jobs, name);\n  // }\n  \n\n  render() {\n    const {open, selectedJob, switchState, activeStep, jobsData } = this.state;\n    console.log(this.props);\n\n    //switches\n    const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n    const handleChange = name => event => {\n      setSwitchState({ ...switchState, [name]: event.target.checked });\n      // filterJobsbyType(this.props.jobs, name);\n    };\n    \n    \n\n    //modal open and close\n    function handleClickOpen() {\n      setOpen(true);\n    }\n\n    function handleClose() {\n      setOpen(false);\n    }\n    \n    //pagination\n    console.log(\"jobsData: \", jobsData)\n    const numJobs = jobsData.length;\n    const numPages = Math.ceil(numJobs/50);\n    const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n    function handleNext() {\n      setActiveStep(prevActiveStep => prevActiveStep + 1);\n      window.scrollTo(0, 0)\n    }\n\n    function handleBack() {\n      setActiveStep(prevActiveStep => prevActiveStep - 1);\n      window.scrollTo(0, 0)\n    }\n\n    return (\n      <div className='jobs'>\n      <JobModal \n        open={open} \n        handleClose={handleClose} \n        job={selectedJob} \n      />\n      <Typography variant=\"h4\" component=\"h1\">\n        Entry level software jobs\n      </Typography>\n      <Typography variant=\"h6\">\n        Found {numJobs} Jobs\n        {/* that fit {searchCriteria} */}\n      </Typography>\n      <Typography variant=\"h6\" component=\"h1\">\n        Showing {activeStep * 50} - {(activeStep * 50) + 50}\n      </Typography>\n      {/* <Switch \n        handleChange={() => handleChange()} \n        switchState={switchState}\n        labelsArr={typeNamesArr}\n      /> */}\n            <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => handleNext()} \n        handleBack={() => handleBack()}\n      />\n      {\n        jobsOnPage.map(\n          ( job,i ) => <Job key={i} job={job} onClick={() => {\n                          handleClickOpen()\n                          selectJob(job)\n                          }}\n                        />\n        )\n      }\n      <div>\n        Page { activeStep + 1 } of { numPages }\n      </div>\n      <Stepper \n        numPages={numPages} \n        activeStep={activeStep} \n        handleNext={() => handleNext()} \n        handleBack={() => handleBack()}\n      />\n        \n      </div>\n    );\n  }\n}\n\nexport default Jobs;\n\n\n\n//OLD FUNCTION COMPONENT WITH HOOKS\n// import React from 'react';\n// import Job from './Job'\n// import { Typography } from '@material-ui/core';\n// import JobModal from '../components/JobModal';\n// import Stepper from '../components/Stepper';\n// import Switch from '../components/Switch';\n\n// export default function Jobs({jobs}) {\n  \n//   // React.useEffect(() => {\n//   //   filterJobsbyType(jobs);\n//   //   // console.log(`You clicked 5 times`);\n//   // },[jobs]);\n\n//   //switches\n//   const [switchState, setSwitchState] = React.useState({\n//     partTime: true,\n//     fullTime: true,\n//     contract: false,\n//   });\n//   const [jobsData, setJobsData] = React.useState(jobs);\n\n//   const typeNamesArr = [\"Part Time\", \"Full Time\", \"Contract\"];\n\n//   const handleChange = name => event => {\n//     setSwitchState({ ...switchState, [name]: event.target.checked });\n//     filterJobsbyType(jobs, name);\n//   };\n  \n//   function filterJobsbyType (jobs, name) {\n//     // console.log(\"function called\", name);\n//     // let partTimeJobs = [];\n//     // let fullTimeJobs = [];\n//     // let contractJobs = [];\n//     // let filteredJobs = [];\n\n//     if(name === 'partTime') {\n//       // partTimeJobs = jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]);\n//       setJobsData(jobs.filter(job => switchState.partTime === true && job.type === typeNamesArr[0]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n//     if(name === 'fullTime'){\n//       // fullTimeJobs = jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]);\n//       setJobsData(jobs.filter(job => switchState.fullTime === true && job.type === typeNamesArr[1]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }        \n\n//     if(name === 'contract') {\n//       // contractJobs = jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]);\n//       setJobsData(jobs.filter(job => switchState.contract === true && job.type === typeNamesArr[2]));\n//       // console.log('switch case: ', name, switchState.name, jobs[0].type);\n//     }\n    \n//     return jobsData.length === 0 ? jobs : jobsData;\n//   }\n\n//   //pagination\n//   console.log(\"jobsData: \", jobsData)\n//   const numJobs = jobsData.length;\n//   const numPages = Math.ceil(numJobs/50);\n//   const [activeStep, setActiveStep] = React.useState(0);\n//   const jobsOnPage = jobsData.slice( activeStep * 50, (activeStep * 50) + 50 );\n\n//   function handleNext() {\n//     setActiveStep(prevActiveStep => prevActiveStep + 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   function handleBack() {\n//     setActiveStep(prevActiveStep => prevActiveStep - 1);\n//     window.scrollTo(0, 0)\n//   }\n\n//   //Modal\n//   const [open, setOpen] = React.useState(false);\n//   const [selectedJob, selectJob] = React.useState({});\n\n//   function handleClickOpen() {\n//     setOpen(true);\n//   }\n\n//   function handleClose() {\n//     setOpen(false);\n//   }\n\n// //TODO add search for terms that go to algo. seperated by commas?\n//   return (\n//     <div className='jobs'>\n//       <JobModal \n//         open={open} \n//         handleClose={handleClose} \n//         job={selectedJob} \n//       />\n//       <Typography variant=\"h4\" component=\"h1\">\n//         Entry level software jobs\n//       </Typography>\n//       <Typography variant=\"h6\">\n//         Found {numJobs} Jobs\n//         {/* that fit {searchCriteria} */}\n//       </Typography>\n//       <Typography variant=\"h6\" component=\"h1\">\n//         Showing {activeStep * 50} - {(activeStep * 50) + 50}\n//       </Typography>\n//       <Switch \n//         handleChange={() => handleChange()} \n//         switchState={switchState}\n//         labelsArr={typeNamesArr}\n//       />\n//             <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//       {\n//         jobsOnPage.map(\n//           ( job,i ) => <Job key={i} job={job} onClick={() => {\n//                           handleClickOpen()\n//                           selectJob(job)\n//                           }}\n//                         />\n//         )\n//       }\n//       <div>\n//         Page { activeStep + 1 } of { numPages }\n//       </div>\n//       <Stepper \n//         numPages={numPages} \n//         activeStep={activeStep} \n//         handleNext={() => handleNext()} \n//         handleBack={() => handleBack()}\n//       />\n//     </div>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}